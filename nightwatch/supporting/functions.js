const selectors = require('./selectors')
const data = require('./data')

module.exports = {
    goodDataTest1: function (browser, test) {
        browser
            .waitForElementVisible(selectors.mainScreenTitle, 3000)
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.loanType.loanTypeQuestion, 2000)
            .click(selectors.loanType.dropDown + ' ' + selectors.loanType[test.loanType])//.click(`${selectors.loanType.dropDown} ${selectors.loanType.homePurchase}`)
            .click(selectors.propertyType.dropDown + ' ' + selectors.propertyType[test.propertyType])
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.cityQuestion, 2000)
            .setValue(selectors.cityName, test.cityName)
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.propertyPurpose.propertyPurposeQuestion, 2000)
            .click(selectors.propertyPurpose[test.propertyPurpose])
            .waitForElementVisible(selectors.newHome.newHomeQuestion, 2000)
            .click(selectors.newHome[test.newHome])
            .waitForElementVisible(selectors.realEstateAgent.realEstateAgentQuestion, 2000)
            .click(selectors.realEstateAgent[test.realEstateAgent])
            .waitForElementVisible(selectors.estimatePurchasePriceQuestion, 2000)
            .setValue(selectors.estimatePurchasePrice, test.estimatePurchasePrice)
            .setValue(selectors.downPayment, test.downPayment)
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.creditScore.creditScoreQuestion, 2000)
            .click(selectors.creditScore[test.creditScore])
            .waitForElementVisible(selectors.bankrutcyHistory.bankruptcyHistoryQuestion, 2000)
            .click(selectors.bankrutcyHistory[test.bankruptcyHistory])
            .waitForElementVisible(selectors.addressInput.addressQuestion, 2000)
            .setValue(selectors.addressInput.lineOne, test.addressLine1)
            .setValue(selectors.addressInput.lineTwo, test.addressLine2)
            .setValue(selectors.addressInput.lineThree, test.addressLine3)
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.contactInfo.contactInfoQuestion, 2000)
            .setValue(selectors.contactInfo.firstname, test.firstName)
            .setValue(selectors.contactInfo.lastName, test.lastName)
            .setValue(selectors.contactInfo.email, test.email)
            .click(selectors.nextButton)
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Full Name:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Email:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Loan Type:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Property Type:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Property Location:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Purchase Reason:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Property Already Located:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Agent Already Engaged:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Estimated Price of Property:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Estimated Down Payment:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Credit Score:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Credit History:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Current Address:')
        browser.expect.element(selectors.overView.nameOutput).text.to.equal(test.nameOutput)
        browser.expect.element(selectors.overView.emailOutput).text.to.equal(test.emailOutput)
        browser.expect.element(selectors.overView.loanTypeOutput).text.to.equal(test.loanTypeOutput)
        browser.expect.element(selectors.overView.propertyTypeOutput).text.to.equal(test.propertyTypeOutput)
        browser.expect.element(selectors.overView.cityOutput).text.to.equal(test.cityOutput)
        browser.expect.element(selectors.overView.propertyPurposeOutput).text.to.equal(test.propertyPurposeOutput)
        browser.expect.element(selectors.overView.newHomeOutput).text.to.equal(test.newHomeOutput)
        browser.expect.element(selectors.overView.realEstateAgentOutput).text.to.equal(test.realEstateAgentOutput)
        browser.expect.element(selectors.overView.estimatePurchasePriceOutput).text.to.equal(test.estimatePurchasePriceOutput)
        browser.expect.element(selectors.overView.downPaymentOutput).text.to.equal(test.downPaymentOutput)
        browser.expect.element(selectors.overView.creditScoreOutput).text.to.equal(test.creditScoreOutput)
        browser.expect.element(selectors.overView.bankruptcyHistoryOutput).text.to.equal(test.bankruptcyHistoryOutput)
        browser.expect.element(selectors.overView.currentAddressOutput.lineOne).text.to.equal(test.currentAddressOutput.lineOne)
        browser.expect.element(selectors.overView.currentAddressOutput.lineTwo).text.to.equal(test.currentAddressOutput.lineTwo)
        browser.expect.element(selectors.overView.currentAddressOutput.lineThree).text.to.equal(test.currentAddressOutput.lineThree)
        browser.click(selectors.overView.send)
        .expect.element(selectors.finalScreen.finalScreenpage).text.to.contain('Thank you for choosing Home Loan Wizard, a representative will be in touch with you shortly to talk about further steps.')
        browser.click(selectors.finalScreen.home)

    },
    badData : function (browser, test) {
        browser
        .waitForElementVisible(selectors.mainScreenTitle, 3000)
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.loanType.loanTypeQuestion, 2000)
            browser.click(selectors.nextButton)
            browser.expect.element(selectors.propertyType.errorline).text.to.contain('The loan type must be selected from the listed values.')
            browser.expect.element(selectors.propertyType.errorline).text.to.contain('The property type must be selected from the listed values.')
            browser.click(selectors.loanType.dropDown + ' ' + selectors.loanType[test.loanType])
            browser.click(selectors.propertyType.dropDown + ' ' + selectors.propertyType[test.propertyType])
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.cityQuestion, 2000)
            .click(selectors.nextButton)
            browser.expect.element(selectors.errorline1).text.to.contain('This field requires a City Name (letters, periods and dashes allowed) and a State abbreviation (separated by a comma, no longer than 30 characters) or a 5 digit zip code. i.e. "94111" and "San Francisco, CA"')
            browser.setValue(selectors.cityName, test.cityName)
            browser.click(selectors.nextButton)
            .waitForElementVisible(selectors.propertyPurpose.propertyPurposeQuestion, 2000)
            .click(selectors.propertyPurpose[test.propertyPurpose])
            .waitForElementVisible(selectors.newHome.newHomeQuestion, 2000)
            .click(selectors.newHome[test.newHome])
            .waitForElementVisible(selectors.realEstateAgent.realEstateAgentQuestion, 2000)
            .click(selectors.realEstateAgent[test.realEstateAgent])
            .waitForElementVisible(selectors.estimatePurchasePriceQuestion, 2000)
            .click(selectors.nextButton)
            browser.expect.element(selectors.propertyType.errorline).text.to.contain('The price needs to be a valid dollar amount, greater than $0, and no less than the down payment.')
            browser.expect.element(selectors.propertyType.errorline).text.to.contain('The down payment needs to be a valid dollar amount, though it can be $0.')
            browser.setValue(selectors.estimatePurchasePrice, test.estimatePurchasePrice)
            .setValue(selectors.downPayment, test.downPayment)
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.creditScore.creditScoreQuestion, 2000)
            .click(selectors.creditScore[test.creditScore])
            .waitForElementVisible(selectors.bankrutcyHistory.bankruptcyHistoryQuestion, 2000)
            .click(selectors.bankrutcyHistory[test.bankruptcyHistory])
            .waitForElementVisible(selectors.addressInput.addressQuestion, 2000)
            .click(selectors.nextButton)
            browser.expect.element(selectors.addressInput.errorline1).text.to.equal('The first line of the address can only be between 5 and 50 characters long.')
            browser.expect.element(selectors.addressInput.errorline2).text.to.equal('The last line must follow a standard city, state zip format (San Francisco, CA 94111), with a valid state abbreviation. It also can be no longer than 50 characters total.')
            browser.setValue(selectors.addressInput.lineOne, test.addressLine1)
            .setValue(selectors.addressInput.lineTwo, test.addressLine2)
            .setValue(selectors.addressInput.lineThree, test.addressLine3)
            .click(selectors.nextButton)
            .waitForElementVisible(selectors.contactInfo.contactInfoQuestion, 2000)
            .click(selectors.nextButton)
            browser.expect.element(selectors.contactInfo.errorline1).text.to.equal('The first name must be between 1 and 30 characters long.')
            browser.expect.element(selectors.contactInfo.errorline2).text.to.equal('The last name must be between 1 and 30 characters long.')
            browser.expect.element(selectors.contactInfo.errorline3).text.to.equal('The email address must follow standard email format (i.e. andy@gmail.com), and cannot exceed 50 characters in length.')
            browser.setValue(selectors.contactInfo.firstname, test.firstName)
            .setValue(selectors.contactInfo.lastName, test.lastName)
            .setValue(selectors.contactInfo.email, test.email)
            .click(selectors.nextButton)
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Name:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Email:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Loan Type:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Property Type:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Property Location:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Purchase Reason:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Property Already Located:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Agent Already Engaged:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Estimated Price of Property:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Estimated Down Payment:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Credit Score:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Credit History:')
        browser.expect.element(selectors.overView.overViewTemplate).text.to.contain('Current Address:')
        browser.expect.element(selectors.overView.nameOutput).text.to.equal(test.nameOutput)
        browser.expect.element(selectors.overView.emailOutput).text.to.equal(test.emailOutput)
        browser.expect.element(selectors.overView.loanTypeOutput).text.to.equal(test.loanTypeOutput)
        browser.expect.element(selectors.overView.propertyTypeOutput).text.to.equal(test.propertyTypeOutput)
        browser.expect.element(selectors.overView.cityOutput).text.to.equal(test.cityOutput)
        browser.expect.element(selectors.overView.propertyPurposeOutput).text.to.equal(test.propertyPurposeOutput)
        browser.expect.element(selectors.overView.newHomeOutput).text.to.equal(test.newHomeOutput)
        browser.expect.element(selectors.overView.realEstateAgentOutput).text.to.equal(test.realEstateAgentOutput)
        browser.expect.element(selectors.overView.estimatePurchasePriceOutput).text.to.equal(test.estimatePurchasePriceOutput)
        browser.expect.element(selectors.overView.downPaymentOutput).text.to.equal(test.downPaymentOutput)
        browser.expect.element(selectors.overView.creditScoreOutput).text.to.equal(test.creditScoreOutput)
        browser.expect.element(selectors.overView.bankruptcyHistoryOutput).text.to.equal(test.bankruptcyHistoryOutput)
        browser.expect.element(selectors.overView.currentAddressOutput.lineOne).text.to.equal(test.currentAddressOutput.lineOne)
        browser.expect.element(selectors.overView.currentAddressOutput.lineTwo).text.to.equal(test.currentAddressOutput.lineTwo)
        browser.expect.element(selectors.overView.currentAddressOutput.lineThree).text.to.equal(test.currentAddressOutput.lineThree)
        browser.click(selectors.overView.send)
        .expect.element(selectors.finalScreen.finalScreenpage).text.to.contain('Thank you for choosing Home Loan Wizard, a representative will be in touch with you shortly to talk about further steps.')
        browser.click(selectors.finalScreen.home)

    }
}


